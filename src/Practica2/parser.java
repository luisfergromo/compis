
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 31 21:43:39 CST 2014
//----------------------------------------------------

package Practica2;

import java_cup.runtime.*;
import Interfaz.IOInterfaz;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 31 21:43:39 CST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\015\002\000\002\003\007" +
    "\000\002\016\002\000\002\004\007\000\002\010\005\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\004\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\012\010\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\013\005\000" +
    "\002\013\003\000\002\014\005\000\002\014\007\000\002" +
    "\014\005\000\002\014\004\000\002\005\005\000\002\005" +
    "\005\000\002\005\003\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\003\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\004\032\004\001\002\000\004\010\012\001" +
    "\002\000\006\002\uffff\032\uffff\001\002\000\006\002\011" +
    "\032\004\001\002\000\006\002\ufffe\032\ufffe\001\002\000" +
    "\006\002\001\032\001\001\002\000\004\002\000\001\002" +
    "\000\034\005\022\011\031\017\036\021\032\022\026\023" +
    "\016\024\020\025\014\026\015\027\037\030\021\031\025" +
    "\032\023\001\002\000\010\004\ufffb\012\111\013\112\001" +
    "\002\000\014\005\041\011\031\023\016\031\025\032\023" +
    "\001\002\000\014\005\041\011\031\023\016\031\025\032" +
    "\023\001\002\000\010\005\105\017\036\022\026\001\002" +
    "\000\022\004\uffed\006\uffed\007\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\001\002\000\014\005\041\011\031" +
    "\023\016\031\025\032\023\001\002\000\014\005\041\011" +
    "\031\023\016\031\025\032\023\001\002\000\034\005\022" +
    "\011\031\017\036\021\032\022\026\023\016\024\020\025" +
    "\014\026\015\027\037\030\021\031\025\032\023\001\002" +
    "\000\024\004\ufff7\006\ufff7\007\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\020\ufff7\001\002\000\022\004\uffeb" +
    "\006\uffeb\007\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\001\002\000\024\004\ufff8\006\ufff8\007\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\020\ufff8\001\002\000" +
    "\010\005\105\017\036\022\026\001\002\000\020\004\uffda" +
    "\006\uffda\012\uffda\013\uffda\014\103\015\uffda\016\uffda\001" +
    "\002\000\020\004\ufff2\006\ufff2\012\ufff2\013\ufff2\014\075" +
    "\015\074\016\073\001\002\000\024\004\ufff6\006\ufff6\007" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6" +
    "\001\002\000\004\005\067\001\002\000\024\004\uffe0\006" +
    "\uffe0\007\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\020\uffe0\001\002\000\024\004\uffe4\006\uffe4\007\uffe4\012" +
    "\uffe4\013\uffe4\014\052\015\051\016\050\020\uffe4\001\002" +
    "\000\010\004\ufffd\012\045\013\046\001\002\000\026\005" +
    "\041\011\031\023\016\024\020\025\014\026\015\027\037" +
    "\030\021\031\025\032\060\001\002\000\014\005\041\011" +
    "\031\023\016\031\025\032\023\001\002\000\024\004\uffdc" +
    "\006\uffdc\007\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\020\uffdc\001\002\000\026\005\041\011\031\023\016" +
    "\024\020\025\014\026\015\027\037\030\021\031\025\032" +
    "\023\001\002\000\010\006\044\012\045\013\046\001\002" +
    "\000\024\004\uffda\006\uffda\007\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\020\uffda\001\002\000\024\004\ufff9" +
    "\006\ufff9\007\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\020\ufff9\001\002\000\026\005\041\011\031\023\016" +
    "\024\020\025\014\026\015\027\037\030\021\031\025\032" +
    "\023\001\002\000\026\005\041\011\031\023\016\024\020" +
    "\025\014\026\015\027\037\030\021\031\025\032\023\001" +
    "\002\000\024\004\uffe5\006\uffe5\007\uffe5\012\uffe5\013\uffe5" +
    "\014\052\015\051\016\050\020\uffe5\001\002\000\026\005" +
    "\041\011\031\023\016\024\020\025\014\026\015\027\037" +
    "\030\021\031\025\032\023\001\002\000\026\005\041\011" +
    "\031\023\016\024\020\025\014\026\015\027\037\030\021" +
    "\031\025\032\023\001\002\000\026\005\041\011\031\023" +
    "\016\024\020\025\014\026\015\027\037\030\021\031\025" +
    "\032\023\001\002\000\024\004\uffe2\006\uffe2\007\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\001\002" +
    "\000\024\004\uffe1\006\uffe1\007\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\020\uffe1\001\002\000\024\004\uffe3" +
    "\006\uffe3\007\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\020\uffe3\001\002\000\024\004\uffe6\006\uffe6\007\uffe6" +
    "\012\uffe6\013\uffe6\014\052\015\051\016\050\020\uffe6\001" +
    "\002\000\010\007\062\012\045\013\046\001\002\000\020" +
    "\007\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\020" +
    "\061\001\002\000\024\004\uffe8\006\uffe8\007\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\001\002\000" +
    "\026\005\041\011\031\023\016\024\020\025\014\026\015" +
    "\027\037\030\021\031\025\032\023\001\002\000\010\012" +
    "\045\013\046\020\064\001\002\000\024\004\uffe9\006\uffe9" +
    "\007\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020" +
    "\uffe9\001\002\000\004\004\066\001\002\000\006\002\ufffc" +
    "\032\ufffc\001\002\000\022\005\022\011\031\017\036\021" +
    "\032\022\026\023\016\031\025\032\023\001\002\000\004" +
    "\014\103\001\002\000\012\007\072\014\075\015\074\016" +
    "\073\001\002\000\022\005\022\011\031\017\036\021\032" +
    "\022\026\023\016\031\025\032\023\001\002\000\014\005" +
    "\041\011\031\023\016\031\025\032\023\001\002\000\014" +
    "\005\041\011\031\023\016\031\025\032\023\001\002\000" +
    "\014\005\041\011\031\023\016\031\025\032\023\001\002" +
    "\000\022\004\uffef\006\uffef\007\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\001\002\000\022\004\uffee\006\uffee" +
    "\007\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\001" +
    "\002\000\022\004\uffec\006\uffec\007\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\001\002\000\012\006\102\014" +
    "\075\015\074\016\073\001\002\000\022\004\ufff1\006\ufff1" +
    "\007\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\001" +
    "\002\000\022\005\022\011\031\017\036\021\032\022\026" +
    "\023\016\031\025\032\023\001\002\000\022\004\ufff0\006" +
    "\ufff0\007\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\001\002\000\022\005\022\011\031\017\036\021\032\022" +
    "\026\023\016\031\025\032\023\001\002\000\024\004\uffe7" +
    "\006\uffe7\007\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\020\uffe7\001\002\000\010\006\110\012\111\013\112" +
    "\001\002\000\024\004\uffea\006\uffea\007\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\020\uffea\001\002\000\022" +
    "\005\022\011\031\017\036\021\032\022\026\023\016\031" +
    "\025\032\023\001\002\000\022\005\022\011\031\017\036" +
    "\021\032\022\026\023\016\031\025\032\023\001\002\000" +
    "\020\004\ufff3\006\ufff3\012\ufff3\013\ufff3\014\075\015\074" +
    "\016\073\001\002\000\020\004\ufff4\006\ufff4\012\ufff4\013" +
    "\ufff4\014\075\015\074\016\073\001\002\000\024\004\uffdb" +
    "\006\uffdb\007\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016" +
    "\uffdb\020\uffdb\001\002\000\024\004\uffdf\006\uffdf\007\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\001" +
    "\002\000\024\004\ufff5\006\ufff5\007\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\020\ufff5\001\002\000\024\004" +
    "\uffdd\006\uffdd\007\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\020\uffdd\001\002\000\024\004\uffde\006\uffde\007" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\020\uffde" +
    "\001\002\000\004\004\123\001\002\000\006\002\ufffa\032" +
    "\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\010\002\005\003\004\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\007\004\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\034\006\033\007\032\010\026\011\012" +
    "\012\027\013\016\014\023\001\001\000\004\016\121\001" +
    "\001\000\004\010\120\001\001\000\004\010\117\001\001" +
    "\000\004\014\116\001\001\000\002\001\001\000\004\010" +
    "\115\001\001\000\004\010\114\001\001\000\022\005\041" +
    "\006\033\007\032\010\026\011\106\012\027\013\016\014" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\064\001\001\000" +
    "\012\005\056\006\033\007\032\010\042\001\001\000\004" +
    "\010\037\001\001\000\002\001\001\000\012\005\041\006" +
    "\033\007\032\010\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\055\007\032\010" +
    "\042\001\001\000\010\006\046\007\032\010\042\001\001" +
    "\000\002\001\001\000\006\007\054\010\042\001\001\000" +
    "\006\007\053\010\042\001\001\000\006\007\052\010\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\062\006\033\007\032\010" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\067\012\070\013" +
    "\016\014\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\067\012\100\013\016\014\023\001\001\000" +
    "\004\010\077\001\001\000\004\010\076\001\001\000\004" +
    "\010\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\067\012\103\013\016\014\023\001\001\000\002\001" +
    "\001\000\014\010\067\011\106\012\027\013\016\014\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\067\012\113\013\016\014\023\001\001" +
    "\000\012\010\067\012\112\013\016\014\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
         if (info instanceof java_cup.runtime.Symbol) {
            
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
             if (s.left >= 0) {                
                  m.append(" in line "+(s.left+1));   
               	 
               	  if (s.right >= 0)                    
                 	 m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_c ::= term 
            {
              Float RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float t = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Float(t.floatValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_c",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op_c ::= SQRT term 
            {
              Float RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float t = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Float f1= new Float(t.floatValue());
  									RESULT =  (float) Math.sqrt(f1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_c",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op_c ::= TAN term 
            {
              Float RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float t = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Float f1= new Float(t.floatValue());
  									RESULT =  (float) Math.tan(f1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_c",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_c ::= COS term 
            {
              Float RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float t = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Float f1= new Float(t.floatValue());
  									RESULT =  (float) Math.cos(f1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_c",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op_c ::= SIN term 
            {
              Float RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float t = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Float f1= new Float(t.floatValue());
  									RESULT =  (float) Math.sin(f1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_c",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_c ::= LN term 
            {
              Float RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float t = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Float f1= new Float(t.floatValue());
  									RESULT =  (float) Math.log(f1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_c",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_b ::= op_c 
            {
              Float RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float c = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Float(c.floatValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_b",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op_b ::= op_b DIVIDE op_c 
            {
              Float RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float c = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Float(b.floatValue() / c.floatValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_b",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_b ::= op_b TIMES op_c 
            {
              Float RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float c = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Float(b.floatValue() * c.floatValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_b",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_b ::= op_b EXP op_c 
            {
              Float RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float c = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (float) Math.pow(b.floatValue(), c.floatValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_b",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op_a ::= op_b 
            {
              Float RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Float(b.floatValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_a",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // op_a ::= op_a MINUS op_b 
            {
              Float RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Float(a.floatValue() - b.floatValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_a",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // op_a ::= op_a PLUS op_b 
            {
              Float RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Float(a.floatValue() + b.floatValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_a",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term2D ::= NORM term2D 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = VarTable.normVector(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term2D",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term2D ::= OPEN ID CLOSE 
            {
              Float[] RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = VarTable.getVector(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term2D",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term2D ::= OPEN op_a COMA op_a CLOSE 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Float[]{a,b}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term2D",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // term2D ::= LPAREN op_a2D RPAREN 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term2D",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_c2D ::= term2D 
            {
              Float[] RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] t = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_c2D",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op_c2D ::= op_b2D EXP term 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = VarTable.expVector(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_c2D",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op_b2D ::= op_c2D 
            {
              Float[] RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] t = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_b2D",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // op_b2D ::= op_b2D DIVIDE term 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = VarTable.divVector(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_b2D",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // op_b2D ::= op_b2D TIMES term 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = VarTable.mulVector(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_b2D",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // op_b2D ::= term TIMES op_b2D 
            {
              Float[] RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float b = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = VarTable.mulVector(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_b2D",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // op_b2D ::= DOT LPAREN op_b2D COMA op_b2D RPAREN 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float[] b = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = VarTable.dotVector(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_b2D",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // op_a2D ::= op_b2D 
            {
              Float[] RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] t = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_a2D",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // op_a2D ::= op_a2D MINUS op_b2D 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] b = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = VarTable.resVector(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_a2D",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // op_a2D ::= op_a2D PLUS op_b2D 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] b = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = VarTable.sumVector(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_a2D",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= MAG term2D 
            {
              Float RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] t = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = VarTable.magVector(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= PI 
            {
              Float RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (float) Math.PI;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= ID 
            {
              Float RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = VarTable.getFloat(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // term ::= NUMBER 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // term ::= LPAREN op_a RPAREN 
            {
              Float RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // line2D ::= ID EQUALS op_a2D NT$1 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("line2D",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 VarTable.addVector(id,a[0],a[1]); IOInterfaz.println(" -> <" + a[0] + ", " + a[1] + ">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // line ::= ID EQUALS op_a NT$0 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("line",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float a = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 VarTable.addFloat(id,a); IOInterfaz.println(" -> " + a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // line ::= line2D 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("line",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list ::= line 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // list ::= list line 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

