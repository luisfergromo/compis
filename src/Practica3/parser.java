
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 15 20:52:41 CDT 2014
//----------------------------------------------------

package Practica3;

import java_cup.runtime.*;
import Interfaz.IOInterfaz;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 15 20:52:41 CDT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\004\000\002\013\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\010\000\002\004\005\000\002\004\005\000\002\004" +
    "\010\000\002\004\005\000\002\004\006\000\002\004\006" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\002\003\000\002" +
    "\002\003\000\002\002\005\000\002\002\006\000\002\002" +
    "\003\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\010\026\010\031\007\033\006\001\002\000" +
    "\010\002\uffff\005\105\006\061\001\002\000\004\002\103" +
    "\001\002\000\010\024\014\025\015\026\017\001\002\000" +
    "\010\024\014\025\015\026\017\001\002\000\010\004\013" +
    "\007\011\010\012\001\002\000\010\011\041\012\044\027" +
    "\046\001\002\000\004\024\035\001\002\000\010\024\014" +
    "\025\015\026\017\001\002\000\042\002\uffe9\005\uffe9\006" +
    "\uffe9\010\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\032\uffe9\034\uffe9\035" +
    "\uffe9\001\002\000\042\002\uffe8\005\uffe8\006\uffe8\010\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\032\uffe8\034\uffe8\035\uffe8\001\002" +
    "\000\024\002\ufff1\005\ufff1\006\ufff1\010\024\020\021\021" +
    "\022\022\025\023\023\035\020\001\002\000\042\002\uffe5" +
    "\005\uffe5\006\uffe5\010\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\032\uffe5" +
    "\034\uffe5\035\uffe5\001\002\000\010\024\014\025\015\026" +
    "\017\001\002\000\010\024\014\025\015\026\017\001\002" +
    "\000\010\024\014\025\015\026\017\001\002\000\010\024" +
    "\014\025\015\026\017\001\002\000\010\024\014\025\015" +
    "\026\017\001\002\000\010\024\014\025\015\026\017\001" +
    "\002\000\042\002\uffe2\005\uffe2\006\uffe2\010\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\032\uffe2\034\uffe2\035\uffe2\001\002\000\020" +
    "\006\030\010\024\020\021\021\022\022\025\023\023\035" +
    "\020\001\002\000\042\002\uffe6\005\uffe6\006\uffe6\010\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\032\uffe6\034\uffe6\035\uffe6\001\002" +
    "\000\042\002\uffe1\005\uffe1\006\uffe1\010\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\032\uffe1\034\uffe1\035\uffe1\001\002\000\042\002" +
    "\uffe3\005\uffe3\006\uffe3\010\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\032" +
    "\uffe3\034\uffe3\035\uffe3\001\002\000\042\002\uffe4\005\uffe4" +
    "\006\uffe4\010\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\032\uffe4\034\uffe4" +
    "\035\uffe4\001\002\000\042\002\uffe7\005\uffe7\006\uffe7\010" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\032\uffe7\034\uffe7\035\uffe7\001" +
    "\002\000\004\006\036\001\002\000\004\004\037\001\002" +
    "\000\010\024\014\025\015\026\017\001\002\000\024\002" +
    "\ufff2\005\ufff2\006\ufff2\010\024\020\021\021\022\022\025" +
    "\023\023\035\020\001\002\000\010\002\ufff7\005\ufff7\006" +
    "\ufff7\001\002\000\010\002\ufff9\005\ufff9\006\ufff9\001\002" +
    "\000\010\002\ufff3\005\ufff3\006\ufff3\001\002\000\010\002" +
    "\ufff6\005\ufff6\006\ufff6\001\002\000\010\002\ufff8\005\ufff8" +
    "\006\ufff8\001\002\000\004\010\047\001\002\000\004\024" +
    "\050\001\002\000\004\006\051\001\002\000\004\030\052" +
    "\001\002\000\006\011\041\012\044\001\002\000\010\002" +
    "\ufff5\005\ufff5\006\ufff5\001\002\000\030\010\024\013\067" +
    "\014\071\015\070\016\066\017\072\020\021\021\022\022" +
    "\025\023\023\035\020\001\002\000\004\032\056\001\002" +
    "\000\010\026\010\031\007\033\006\001\002\000\010\002" +
    "\ufff0\005\060\006\061\001\002\000\010\026\ufffd\031\ufffd" +
    "\033\ufffd\001\002\000\012\006\061\026\ufffa\031\ufffa\033" +
    "\ufffa\001\002\000\010\026\ufffc\031\ufffc\033\ufffc\001\002" +
    "\000\010\026\010\031\007\033\006\001\002\000\010\002" +
    "\ufff4\005\060\006\061\001\002\000\010\026\ufffb\031\ufffb" +
    "\033\ufffb\001\002\000\010\024\014\025\015\026\017\001" +
    "\002\000\010\024\014\025\015\026\017\001\002\000\010" +
    "\024\014\025\015\026\017\001\002\000\010\024\014\025" +
    "\015\026\017\001\002\000\010\024\014\025\015\026\017" +
    "\001\002\000\022\010\024\020\021\021\022\022\025\023" +
    "\023\032\uffea\034\uffea\035\020\001\002\000\022\010\024" +
    "\020\021\021\022\022\025\023\023\032\uffed\034\uffed\035" +
    "\020\001\002\000\022\010\024\020\021\021\022\022\025" +
    "\023\023\032\uffec\034\uffec\035\020\001\002\000\022\010" +
    "\024\020\021\021\022\022\025\023\023\032\uffee\034\uffee" +
    "\035\020\001\002\000\022\010\024\020\021\021\022\022" +
    "\025\023\023\032\uffeb\034\uffeb\035\020\001\002\000\004" +
    "\034\101\001\002\000\010\026\010\031\007\033\006\001" +
    "\002\000\010\002\uffef\005\060\006\061\001\002\000\004" +
    "\002\000\001\002\000\004\002\001\001\002\000\012\002" +
    "\ufffe\026\ufffd\031\ufffd\033\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\006\003\004\004\003\001\001\000\010\011" +
    "\103\012\062\013\061\001\001\000\002\001\001\000\006" +
    "\002\053\005\077\001\001\000\006\002\053\005\054\001" +
    "\001\000\002\001\001\000\010\006\042\007\041\010\044" +
    "\001\001\000\002\001\001\000\004\002\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\033\001\001\000\004\002\032\001" +
    "\001\000\004\002\031\001\001\000\004\002\030\001\001" +
    "\000\004\002\026\001\001\000\004\002\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\056\001" +
    "\001\000\006\012\062\013\061\001\001\000\002\001\001" +
    "\000\004\013\064\001\001\000\002\001\001\000\004\004" +
    "\063\001\001\000\006\012\062\013\061\001\001\000\002" +
    "\001\001\000\004\002\076\001\001\000\004\002\075\001" +
    "\001\000\004\002\074\001\001\000\004\002\073\001\001" +
    "\000\004\002\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\101\001\001\000\006\012" +
    "\062\013\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
         if (info instanceof java_cup.runtime.Symbol) {
            
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
             if (s.left >= 0) {                
                  m.append(" in line "+(s.left+1));   
               	 
               	  if (s.right >= 0)                    
                 	 m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= E DIV E 
            {
              Variable RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable E1 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable E2 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										IOInterfaz.print( E1.value +"/"+ E2.value);
										
											if(E1.type==Exception.class || E2.type==Exception.class)
												RESULT= new Variable<Exception>(Exception.class, new Exception() );
											if(E1.type==float.class || E2.type==float.class)
												RESULT=new Variable( float.class, Float.parseFloat(""+E1.value) / Float.parseFloat(""+E2.value) );
											else
												RESULT=new Variable( int.class, (int) (((int) E1.value) / ((int)E2.value)));
											
										IOInterfaz.println( "= "+RESULT.value);
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= E TIMES E 
            {
              Variable RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable E1 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable E2 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										IOInterfaz.print( E1.value +"*"+ E2.value);
										
											if(E1.type==Exception.class || E2.type==Exception.class)
												RESULT= new Variable<Exception>(Exception.class, new Exception() );
											if(E1.type==float.class || E2.type==float.class)
												RESULT=new Variable( float.class, Float.parseFloat(""+E1.value) * Float.parseFloat(""+E2.value) );
											else
												RESULT=new Variable( int.class, (int) (((int) E1.value) * ((int)E2.value)));
											
										IOInterfaz.println( "= "+RESULT.value);
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= E MINUS E 
            {
              Variable RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable E1 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable E2 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										IOInterfaz.print( E1.value +"-"+ E2.value);
										
											if(E1.type==Exception.class || E2.type==Exception.class)
												RESULT= new Variable<Exception>(Exception.class, new Exception() );
											if(E1.type==float.class || E2.type==float.class)
												RESULT=new Variable( float.class, Float.parseFloat(""+E1.value) - Float.parseFloat(""+E2.value) );
											else
												RESULT=new Variable( int.class, (int) (((int) E1.value) - ((int)E2.value)));
											
										IOInterfaz.println( "= "+RESULT.value);
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= E PLUS E 
            {
              Variable RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable E1 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable E2 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										IOInterfaz.print( E1.value +"+"+ E2.value);
										
											if(E1.type==Exception.class || E2.type==Exception.class)
												RESULT= new Variable<Exception>(Exception.class, new Exception() );
											if(E1.type==float.class && E2.type==float.class)
												RESULT=new Variable( float.class, Float.parseFloat(""+E1.value) + Float.parseFloat(""+E2.value) ); 
											else
												RESULT=new Variable( int.class, (int) (((int) E1.value) + ((int)E2.value)));
											
										IOInterfaz.println( "= "+RESULT.value);
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= id 
            {
              Variable RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											try{
												RESULT=symTable.get_id(name);
											}catch(Exception ex){
												RESULT= new Variable<Exception>(Exception.class, new Exception() );
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E OPEN E CLOSE 
            {
              Variable RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Variable E1 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variable E2 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											if(E2.type==int.class && E1.isArray())
												RESULT= new Variable(E1.type, E1.array[(int)E2.value] );
											else
												RESULT= new Variable<Exception>(Exception.class, new Exception() );
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E mod E 
            {
              Variable RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable E1 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable E2 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											if(E1.type==int.class && E2.type==int.class) 
												RESULT= new Variable<Integer>(int.class, (int) (((int) E1.value) % ((int)E2.value)));
											else if(E1.type==float.class && E2.type==int.class) 
												RESULT= new Variable<Integer>(int.class, (int) (((float) E1.value) % ((int)E2.value))); 
											else 
												RESULT= new Variable<Exception>(Exception.class, new Exception() );
											IOInterfaz.println( E1.value +"%"+ E2.value +"= "+RESULT.value);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= real_num 
            {
              Variable RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											RESULT= new Variable<Float>(float.class, n);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= integer_num 
            {
              Variable RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											RESULT= new Variable<Integer>(int.class, n);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // C ::= E EQUALS E 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable E1 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable E2 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											if( E1.type==E2.type && E1.isArray()==E2.isArray()) 
												RESULT= "Boolean";
											else 
												RESULT="Error";
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C ::= E MINOR_EQUALS E 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable E1 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable E2 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											if( E1.type==E2.type && E1.isArray()==E2.isArray()) 
												RESULT= "Boolean";
											else 
												RESULT="Error";
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // C ::= E MAJOR_EQUALS E 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable E1 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable E2 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											if( E1.type==E2.type && E1.isArray()==E2.isArray()) 
												RESULT= "Boolean";
											else 
												RESULT="Error";
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C ::= E MINOR_THAN E 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable E1 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable E2 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											if( E1.type==E2.type && E1.isArray()==E2.isArray()) 
												RESULT= "Boolean";
											else 
												RESULT="Error";
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // C ::= E MAJOR_THAN E 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable E1 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable E2 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											if( E1.type==E2.type && E1.isArray()==E2.isArray()) 
												RESULT= "Boolean";
											else 
												RESULT="Error";
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // S ::= WHILE C DO S 
            {
              String RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String C1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										if (C1.contentEquals("Boolean") && !S1.contentEquals("Error"))
											RESULT= "Void"; 
										else
											RESULT="Error";
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S ::= IF C then S 
            {
              String RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String C1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										if (C1.contentEquals("Boolean") && !S1.contentEquals("Error")) 
											RESULT= "Void";
										else 
											RESULT="Error";
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S ::= id ASSIGN E 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable E1 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
										RESULT= "Error";
										Variable tmp = symTable.get_id(name);
										symTable.close_declarations();
																				
										if(tmp!=null && !tmp.isArray())
										{
											if(E1.type==tmp.type || tmp.type== float.class)
											{
												tmp.value= E1.value;
												RESULT="Void";
											}
										}
										
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S ::= id OPEN integer_num CLOSE ASSIGN E 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer index = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable E1 = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										RESULT= "Error";
										Variable tmp = symTable.get_id(name);
										symTable.close_declarations();
										
										if(tmp!=null && tmp.isArray())
										{
											if(E1.type==tmp.type || tmp.type== float.class)
											{
												if(tmp.size < index)
												{
													tmp.array[index]= E1.value;
													RESULT="Void";
												}
												else
													IOInterfaz.println("index out of range at "+name);
											}
										}
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S ::= id DOTS T 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable type = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*DECLARATIONS*/
										
										type.name=name;
									
										if(symTable.insert_id (type))
											RESULT="Void";
										else
											RESULT="Error";
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S ::= S semi_or_close S 
            {
              String RESULT =null;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String S1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										if(S1.contentEquals("Error") || S2.contentEquals("Error"))
											RESULT="Error";
										else 
											RESULT= "Void";
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // compound ::= array OPEN integer_num CLOSE of basic 
            {
              Variable RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable T = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
										if(T.type==int.class)
										{
											RESULT = new Variable<Integer>( int.class , new Integer[n]);
										}
										else if(T.type== float.class)
										{
											RESULT = new Variable<Float>( float.class , new Float[n]);
										}
										else
											RESULT= new Variable<Exception>(Exception.class, new Exception() );
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // basic ::= REAL 
            {
              Variable RESULT =null;
		 IOInterfaz.print("real "); RESULT= new Variable<Float>(float.class, new Float(0.0));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // basic ::= INTEGER 
            {
              Variable RESULT =null;
		 IOInterfaz.print("integer "); RESULT= new Variable<Integer>(int.class, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // T ::= compound 
            {
              Variable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable t = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // T ::= basic 
            {
              Variable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable t = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // close ::= CLOSE 
            {
              Variable RESULT =null;
		 symTable.pop_block(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("close",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // close ::= CLOSE close 
            {
              Variable RESULT =null;
		 symTable.pop_block(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("close",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // semi_or_close ::= close 
            {
              Variable RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_or_close",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // semi_or_close ::= SEMI 
            {
              Variable RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("semi_or_close",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // end ::= SEMI 
            {
              Variable RESULT =null;
		IOInterfaz.println( "\n------end-----");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= S 
            {
              String RESULT =null;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										if(!S1.contentEquals("Void") && symTable.is_balanced())
											IOInterfaz.println("\n\n===== SEMANTICS ARE INVALID =====");
										else 
											IOInterfaz.println("\n\n===== SEMANTICS ARE VALID =====");
											
										if(!symTable.is_balanced())
											IOInterfaz.println("\n\n===== BLOCKS ARE UNBALANCED =====");
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= S end 
            {
              String RESULT =null;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String S1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
										if(!S1.contentEquals("Void") && symTable.is_balanced())
											IOInterfaz.println("\n\n===== SEMANTICS ARE INVALID =====");
										else 
											IOInterfaz.println("\n\n===== SEMANTICS ARE VALID =====");
											
										if(!symTable.is_balanced())
											IOInterfaz.println("\n\n===== BLOCKS ARE UNBALANCED =====");
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

