
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 24 18:24:30 CDT 2014
//----------------------------------------------------

package Practica3;

import java_cup.runtime.*;
import Interfaz.IOInterfaz;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 24 18:24:30 CDT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\007\003\000\002\007\003" +
    "\000\002\010\010\000\002\010\004\000\002\004\005\000" +
    "\002\004\005\000\002\004\010\000\002\004\005\000\002" +
    "\004\006\000\002\004\006\000\002\005\005\000\002\006" +
    "\003\000\002\006\003\000\002\006\005\000\002\006\006" +
    "\000\002\006\004\000\002\006\003\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\010\020\010\023\007\025\006\001\002\000" +
    "\006\002\001\005\055\001\002\000\004\002\064\001\002" +
    "\000\010\016\014\017\015\020\017\001\002\000\010\016" +
    "\014\017\015\020\017\001\002\000\010\004\013\006\011" +
    "\007\012\001\002\000\012\011\041\012\034\013\037\021" +
    "\042\001\002\000\004\016\030\001\002\000\010\016\014" +
    "\017\015\020\017\001\002\000\026\002\ufff2\005\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\014\ufff2\015\ufff2\024\ufff2\026\ufff2" +
    "\027\ufff2\001\002\000\026\002\ufff1\005\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\014\ufff1\015\ufff1\024\ufff1\026\ufff1\027\ufff1" +
    "\001\002\000\016\002\ufff6\005\ufff6\007\022\011\021\015" +
    "\023\027\020\001\002\000\026\002\uffed\005\uffed\007\uffed" +
    "\010\uffed\011\uffed\014\uffed\015\uffed\024\uffed\026\uffed\027" +
    "\uffed\001\002\000\010\016\014\017\015\020\017\001\002" +
    "\000\026\002\uffee\005\uffee\007\uffee\010\uffee\011\uffee\014" +
    "\uffee\015\uffee\024\uffee\026\uffee\027\uffee\001\002\000\010" +
    "\016\014\017\015\020\017\001\002\000\010\016\014\017" +
    "\015\020\017\001\002\000\026\002\uffec\005\uffec\007\uffec" +
    "\010\uffec\011\uffec\014\uffec\015\uffec\024\uffec\026\uffec\027" +
    "\uffec\001\002\000\014\007\022\010\026\011\021\015\023" +
    "\027\020\001\002\000\026\002\uffef\005\uffef\007\uffef\010" +
    "\uffef\011\uffef\014\uffef\015\uffef\024\uffef\026\uffef\027\uffef" +
    "\001\002\000\026\002\ufff0\005\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\014\ufff0\015\ufff0\024\ufff0\026\ufff0\027\ufff0\001\002" +
    "\000\004\010\031\001\002\000\004\004\032\001\002\000" +
    "\010\016\014\017\015\020\017\001\002\000\016\002\ufff7" +
    "\005\ufff7\007\022\011\021\015\023\027\020\001\002\000" +
    "\006\002\ufffd\005\ufffd\001\002\000\006\002\uffff\005\uffff" +
    "\001\002\000\006\002\ufff8\005\ufff8\001\002\000\006\002" +
    "\ufffc\005\ufffc\001\002\000\006\002\ufffe\005\ufffe\001\002" +
    "\000\006\012\034\013\037\001\002\000\004\007\043\001" +
    "\002\000\004\016\044\001\002\000\004\010\045\001\002" +
    "\000\004\022\046\001\002\000\006\012\034\013\037\001" +
    "\002\000\006\002\ufffb\005\ufffb\001\002\000\006\002\ufffa" +
    "\005\ufffa\001\002\000\014\007\022\011\021\014\057\015" +
    "\023\027\020\001\002\000\004\024\053\001\002\000\010" +
    "\020\010\023\007\025\006\001\002\000\006\002\ufff5\005" +
    "\055\001\002\000\010\020\010\023\007\025\006\001\002" +
    "\000\006\002\ufff9\005\ufff9\001\002\000\010\016\014\017" +
    "\015\020\017\001\002\000\016\007\022\011\021\015\023" +
    "\024\ufff3\026\ufff3\027\020\001\002\000\004\026\062\001" +
    "\002\000\010\020\010\023\007\025\006\001\002\000\006" +
    "\002\ufff4\005\055\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\006\002\004\004\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\060\006\050\001\001" +
    "\000\006\005\051\006\050\001\001\000\002\001\001\000" +
    "\010\003\035\007\034\010\037\001\001\000\002\001\001" +
    "\000\004\006\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\026" +
    "\001\001\000\002\001\001\000\004\006\024\001\001\000" +
    "\004\006\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\053\001\001\000\002\001\001\000\004\004\055" +
    "\001\001\000\002\001\001\000\004\006\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\062\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
         if (info instanceof java_cup.runtime.Symbol) {
            
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
             if (s.left >= 0) {                
                  m.append(" in line "+(s.left+1));   
               	 
               	  if (s.right >= 0)                    
                 	 m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E ::= E oparit E 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E ::= id 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 try{RESULT=symTable.get_id(name,true,false).type;}catch(Exception ex){RESULT="Error";}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E ::= E PTR 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(E1.startsWith("Pointer")) RESULT=E1; else RESULT="Error"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E ::= E OPEN E CLOSE 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String E2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(E2.contentEquals("Integer")) RESULT=E1; else RESULT="Error"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E ::= E mod E 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(E1.contentEquals("Integer") && E2.contentEquals("Integer")) RESULT="Integer"; else RESULT="Error"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= real_num 
            {
              String RESULT =null;
		 RESULT="Real"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= integer_num 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // C ::= E oprel E 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(E1.contentEquals(E2)) RESULT="Boolean"; else RESULT="Error"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S ::= WHILE C DO S 
            {
              String RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String C1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (C1.contentEquals("Boolean") && !S1.contentEquals("Error")) RESULT= "Void"; else RESULT="Error"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S ::= IF C then S 
            {
              String RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String C1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (C1.contentEquals("Boolean") && !S1.contentEquals("Error")) RESULT= "Void"; else RESULT="Error"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S ::= id ASSIGN E 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(symTable.get_id(name,true,false)==null) RESULT= "Error";
																else {
																	String tmp = symTable.get_id(name,true,true).type;
																	if(tmp.contentEquals(E1)) RESULT= "Void";
																	else if(tmp.contentEquals("Real") && E1.contentEquals("Integer")) RESULT= "Void";
																	else RESULT="Error";
																}
															
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S ::= id OPEN integer_num CLOSE ASSIGN E 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
																/*ASSIGNATIONS*/
																
																if(symTable.get_id(name,true,false)==null) RESULT= "Error";
																else {
																	String tmp = symTable.get_id(name,true,true).type;
																	if(tmp.endsWith(E1+")")) RESULT= "Void";
																	else if(tmp.contentEquals("Array(Real)") && E1.contentEquals("Integer")) RESULT= "Void";
																	else RESULT="Error";
																}
															
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S ::= id DOTS T 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*DECLARATIONS*/
			
																if(symTable.insert_id (name,type.toString()))
																RESULT="Void";
																else
																{
																	System.out.println("ERROR: identificador duplicado"); 
																	RESULT="Error";
																}
															
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= S SEMI S 
            {
              String RESULT =null;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String S1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(S1.contentEquals(S2)) RESULT= "Void"; else RESULT="Error";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // compound ::= PTR basic 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "Pointer("+type+")";		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // compound ::= array OPEN integer_num CLOSE of basic 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "Array("+type+")"; 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // basic ::= REAL 
            {
              String RESULT =null;
		 RESULT="Real"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // basic ::= INTEGER 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // T ::= compound 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // T ::= basic 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= S 
            {
              String RESULT =null;
		int S1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String S1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										if(!S1.contentEquals("Void") && symTable.is_balanced())
											System.out.println("\n\n===== SEMANTICS ARE INVALID =====");
										else 
											System.out.println("\n\n===== SEMANTICS ARE VALID =====");
											
										if(!symTable.is_balanced())
											System.out.println("\n\n===== BLOCKS ARE UNBALANCED =====");
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

