
package Practica3;
import java_cup.runtime.*;
import Interfaz.IOInterfaz;

parser code {:
    
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
         if (info instanceof java_cup.runtime.Symbol) {
            
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
             if (s.left >= 0) {                
                  m.append(" in line "+(s.left+1));   
               	 
               	  if (s.right >= 0)                    
                 	 m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};


/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal           		ASSIGN, SEMI, CLOSE, DOTS, OPEN, INTEGER, REAL;
terminal           		MAJOR_THAN, MINOR_THAN, MAJOR_EQUALS, MINOR_EQUALS, EQUALS;
terminal           		PLUS, MINUS, TIMES, DIV;

terminal Integer  		integer_num;
terminal Float  		real_num;
terminal String  		id;
terminal String   		array, of, IF, then, WHILE, DO, mod;

non terminal Variable   E;
non terminal String     P, S, C;
non terminal Variable   T, basic, compound;
non terminal Variable   end, semi_or_close, close;

/* -------------Precedence and Associatively of Terminals Section----------- */
      
precedence left MAJOR_THAN, MINOR_THAN, MAJOR_EQUALS, MINOR_EQUALS, EQUALS, PLUS, MINUS, TIMES, DIV, ASSIGN, SEMI, CLOSE, DOTS, mod;

/* ----------------------------Grammar Section-------------------- */

P 		::=		S:S1 end			{:
										if(!S1.contentEquals("Void") && symTable.is_balanced())
											IOInterfaz.println("\n\n===== SEMANTICS ARE INVALID =====");
										else 
											IOInterfaz.println("\n\n===== SEMANTICS ARE VALID =====");
											
										if(!symTable.is_balanced())
											IOInterfaz.println("\n\n===== BLOCKS ARE UNBALANCED =====");
									:}
				|
				
				S:S1 				{:
										if(!S1.contentEquals("Void") && symTable.is_balanced())
											IOInterfaz.println("\n\n===== SEMANTICS ARE INVALID =====");
										else 
											IOInterfaz.println("\n\n===== SEMANTICS ARE VALID =====");
											
										if(!symTable.is_balanced())
											IOInterfaz.println("\n\n===== BLOCKS ARE UNBALANCED =====");
									:}
			;

end		::=		SEMI				{:IOInterfaz.println( "\n------end-----");:}
			;

semi_or_close	::=		SEMI
				|		close
				;

close			::=		CLOSE close	{: symTable.pop_block(); :}
				|		CLOSE		{: symTable.pop_block(); :}
				;

T 		::=		basic:t 			{:RESULT=t;:}
			|	compound:t 			{:RESULT=t;:}
			;

basic 	::=		INTEGER				{: IOInterfaz.print("integer "); RESULT= new Variable<Integer>(int.class, 0); :}
			|	REAL				{: IOInterfaz.print("real "); RESULT= new Variable<Float>(float.class, new Float(0.0));  :}
			;
	
compound ::=	array OPEN integer_num:n CLOSE of basic:T
									{: 
										if(T.type==int.class)
										{
											RESULT = new Variable<Integer>( int.class , new Integer[n]);
										}
										else if(T.type== float.class)
										{
											RESULT = new Variable<Float>( float.class , new Float[n]);
										}
										else
											RESULT= new Variable<Exception>(Exception.class, new Exception() );
									:}
			;

S			::=		S:S1 semi_or_close S:S2 	
									{:
										if(S1.contentEquals("Error") || S2.contentEquals("Error"))
											RESULT="Error";
										else 
											RESULT= "Void";
									:}

			|	id:name DOTS T:type {: /*DECLARATIONS*/
										
										type.name=name;
									
										if(symTable.insert_id (type))
											RESULT="Void";
										else
											RESULT="Error";
									:}
															
															
			|	id:name OPEN integer_num:index CLOSE ASSIGN E:E1	
			
									{:
										RESULT= "Error";
										Variable tmp = symTable.get_id(name);
										symTable.close_declarations();
										
										if(tmp!=null && tmp.isArray())
										{
											if(E1.type==tmp.type || tmp.type== float.class)
											{
												if(tmp.size < index)
												{
													tmp.array[index]= E1.value;
													RESULT="Void";
												}
												else
													IOInterfaz.println("index out of range at "+name);
											}
										}
									:}
															
			|	id:name ASSIGN E:E1	{: 	
										RESULT= "Error";
										Variable tmp = symTable.get_id(name);
										symTable.close_declarations();
																				
										if(tmp!=null && !tmp.isArray())
										{
											if(E1.type==tmp.type || tmp.type== float.class)
											{
												tmp.value= E1.value;
												RESULT="Void";
											}
										}
										
									:}
															
			|	IF C:C1 then S:S1	{:
										if (C1.contentEquals("Boolean") && !S1.contentEquals("Error")) 
											RESULT= "Void";
										else 
											RESULT="Error";
									:}
			|	WHILE C:C1 DO S:S1	{:
										if (C1.contentEquals("Boolean") && !S1.contentEquals("Error"))
											RESULT= "Void"; 
										else
											RESULT="Error";
									:}
			;

C		::=	E:E1 MAJOR_THAN E:E2		{:
											if( E1.type==E2.type && E1.isArray()==E2.isArray()) 
												RESULT= "Boolean";
											else 
												RESULT="Error";
										:}
			|
			
			E:E1 MINOR_THAN E:E2		{: 
											if( E1.type==E2.type && E1.isArray()==E2.isArray()) 
												RESULT= "Boolean";
											else 
												RESULT="Error";
										:}
			|
			
			E:E1 MAJOR_EQUALS E:E2		{: 
											if( E1.type==E2.type && E1.isArray()==E2.isArray()) 
												RESULT= "Boolean";
											else 
												RESULT="Error";
										:}
			|
			
			E:E1 MINOR_EQUALS E:E2		{: 
											if( E1.type==E2.type && E1.isArray()==E2.isArray()) 
												RESULT= "Boolean";
											else 
												RESULT="Error";
										:}

			|
			
			E:E1 EQUALS E:E2			{: 
											if( E1.type==E2.type && E1.isArray()==E2.isArray()) 
												RESULT= "Boolean";
											else 
												RESULT="Error";
										:}

			;

E		::=
			integer_num:n				{: 
											RESULT= new Variable<Integer>(int.class, n);
										:}
			
			|	
			
			real_num:n					{: 
											RESULT= new Variable<Float>(float.class, n);
										:}
			|
			
			E:E1 mod E:E2			
										{: 
											if(E1.type==int.class && E2.type==int.class) 
												RESULT= new Variable<Integer>(int.class, (int) (((int) E1.value) % ((int)E2.value)));
											else if(E1.type==float.class && E2.type==int.class) 
												RESULT= new Variable<Integer>(int.class, (int) (((float) E1.value) % ((int)E2.value))); 
											else 
												RESULT= new Variable<Exception>(Exception.class, new Exception() );
											IOInterfaz.println( E1.value +"%"+ E2.value +"= "+RESULT.value);
										:}
			
			|
			
			E:E1 OPEN E:E2 CLOSE
										{: 
											if(E2.type==int.class && E1.isArray())
												RESULT= new Variable(E1.type, E1.array[(int)E2.value] );
											else
												RESULT= new Variable<Exception>(Exception.class, new Exception() );
										:}
											
			|
			
			id:name						{: 
											try{
												RESULT=symTable.get_id(name);
											}catch(Exception ex){
												RESULT= new Variable<Exception>(Exception.class, new Exception() );
											}
										:}
			
			|
			
			E:E1 PLUS E:E2			{:
										IOInterfaz.print( E1.value +"+"+ E2.value);
										
											if(E1.type==Exception.class || E2.type==Exception.class)
												RESULT= new Variable<Exception>(Exception.class, new Exception() );
											if(E1.type==float.class && E2.type==float.class)
												RESULT=new Variable( float.class, Float.parseFloat(""+E1.value) + Float.parseFloat(""+E2.value) ); 
											else
												RESULT=new Variable( int.class, (int) (((int) E1.value) + ((int)E2.value)));
											
										IOInterfaz.println( "= "+RESULT.value);
									:}
			|
			
			E:E1 MINUS E:E2			{:
										IOInterfaz.print( E1.value +"-"+ E2.value);
										
											if(E1.type==Exception.class || E2.type==Exception.class)
												RESULT= new Variable<Exception>(Exception.class, new Exception() );
											if(E1.type==float.class || E2.type==float.class)
												RESULT=new Variable( float.class, Float.parseFloat(""+E1.value) - Float.parseFloat(""+E2.value) );
											else
												RESULT=new Variable( int.class, (int) (((int) E1.value) - ((int)E2.value)));
											
										IOInterfaz.println( "= "+RESULT.value);
									:}
			|
			
			E:E1 TIMES E:E2			{:
										IOInterfaz.print( E1.value +"*"+ E2.value);
										
											if(E1.type==Exception.class || E2.type==Exception.class)
												RESULT= new Variable<Exception>(Exception.class, new Exception() );
											if(E1.type==float.class || E2.type==float.class)
												RESULT=new Variable( float.class, Float.parseFloat(""+E1.value) * Float.parseFloat(""+E2.value) );
											else
												RESULT=new Variable( int.class, (int) (((int) E1.value) * ((int)E2.value)));
											
										IOInterfaz.println( "= "+RESULT.value);
									:}
			|
			
			E:E1 DIV E:E2			{:
										IOInterfaz.print( E1.value +"/"+ E2.value);
										
											if(E1.type==Exception.class || E2.type==Exception.class)
												RESULT= new Variable<Exception>(Exception.class, new Exception() );
											if(E1.type==float.class || E2.type==float.class)
												RESULT=new Variable( float.class, Float.parseFloat(""+E1.value) / Float.parseFloat(""+E2.value) );
											else
												RESULT=new Variable( int.class, (int) (((int) E1.value) / ((int)E2.value)));
											
										IOInterfaz.println( "= "+RESULT.value);
									:}

			;
